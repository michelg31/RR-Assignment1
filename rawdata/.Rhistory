rawData <- read.csv(filename, stringsAsFactors=FALSE)
str(rawData)
test <- dataset
test <- rawData
?transform
rawData <- transform(rawData, date = as.date(date, "%Y-%m-%d"))
rawData <- transform(rawData, date = as.Date(date, "%Y-%m-%d"))
rawdata[2,1]
rawData[2,1]
rawData[1,2]
?month
?mois
month(Sys.time())
?Mois
Month(Sys.time())
format(date[1,2],%m)
format(date[1,2],"%m")
?format
rawData[1,2]
format(date[1,2],"%Y")
tail(rawData)
sum(steps)
sum(rawData$steps)
sum(rawData$steps, rm.na=TRUE)
?sum
View(rawData)
total <- rawData$steps
sum(total)
sum(rawData$steps, na.rm=TRUE)
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = factor(as.Date(date, "%Y-%m-%d")))  # transform date to Date format
sum(rawData$steps[,2], na.rm=TRUE)
lapply(drawData$date, sum)
lapply(rawData$date, sum)
lapply(rawData$date, sum, na.rm=TRUE)
setwd(file.path(dir,"rawdata"))
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = as.Date(date, "%Y-%m-%d"))  # transform date to Date format
lapply(rawData$date, sum, na.rm=TRUE)
rawData <- read.csv(filename, stringsAsFactors=FALSE)
lapply(rawData$date, sum, na.rm=TRUE)
setwd(file.path(dir,"rawdata"))
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = factor(as.Date(date, "%Y-%m-%d")))  # transform date to Date format
lapply(rawData$date, function(elt) sum(rawData[,1][,rawData$date==elt], na.rm=TRUE)
)
lapply(rawData$date, function(elt) sum(rawData[,1][,rawData$date==elt], na.rm=TRUE))
sapply(rawData$date, function(elt) sum(rawData[,1][,rawData$date==elt], na.rm=TRUE))
sapply(rawData$date, function(elt) sum(rawData$steps[,rawData$date==elt], na.rm=TRUE))
sum(rawData$)
sum(rawData$steps)
sum(rawData$steps, na.rm=TRUE)
sum(rawData[,1], na.rm=TRUE)
sum(rawData[,1][,rawdata[,2]=="2010-11-01"], na.rm=TRUE)
sum(rawData[,1][,rawData[,2]=="2010-11-01"], na.rm=TRUE)
sapply(rawData$date, sum(rawData$steps;na.rm=TRUE))
sapply(rawData$date, sum(rawData$steps,na.rm=TRUE))
test <- rawData[,!is.na(rawdata[,1])]
test <- rawData[,!is.na(rawData[,1])]
test <- rawData[,][,!is.na(rawData[,1])]
test <- rawData[!is.na(RawData[,1]),]
rawData <- [1,10]
test <- rawData[1,10]
is.na(test[,1])
is.na(test[,2])
test <- rawData[1:10,]
is.na(test[,1])
test <- rawData[!is.na[rawData[,1]],]
test <- rawData[!is.na(rawData[,1]),]
?colsum
?colSum
?ColSum
apply(RawData, 2, sum, na.rm=TRUE)
apply(rawData, 2, sum, na.rm=TRUE)
apply(rawData, 2, sum)
apply(rawData[1], 2, sum)
apply(rawData[1,], 2, sum)
apply(rawData[,1], 2, sum)
apply(test, 2, sum)
apply(test[,1], 2, sum)
apply(test[,c(1,3)], 2, sum)
sum(test[,1])
?lapply
sapply(test, sum, test$date, na.rm=TRUE)
sapply(test, sum, test$step, na.rm=TRUE)
lapply(test, sum, test$step, na.rm=TRUE)
lapply(test, sum(test[,1]), test$date, na.rm=TRUE)
?sapply
vapply(test, sum(test[,1]), test$date, na.rm=TRUE)
vapply(test, sum, test$date, na.rm=TRUE)
?colSUM
colSums(test)
colSums(test[,1])
tapply(test[,1], test[,2],sum, na.rm=TRUE)
tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = factor(as.Date(date, "%Y-%m-%d")))  # transform date to Date format
dir <- getwd()
rawDir <- "rawdata"
filename <- "activity.csv"
## Check directory and file exist
if (!any(dir(dir)==rawDir)) return(message(paste(
"Unable to find 'rawdata' directory. Please chek your working directory.\nCurrent directory ->", dir )))
setwd(file.path(dir,"rawdata"))
if (!any(list.files()==filename)) return(essage(paste(sep="",
"Unable to find '",filename,"' in '", rawDir,"'\nPlease check filename")))
setwd(dir)
## Load Data
message("Loading data...")
setwd(file.path(dir,"rawdata"))
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = factor(as.Date(date, "%Y-%m-%d")))  # transform date to Date format
setwd(file.path(dir,"rawdata"))
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = factor(as.Date(date, "%Y-%m-%d")))  # transform date to Date format
stepsTotal <-  tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
stepsTotal <-  c(rawData$date, tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
)
stepsTotal [,1]<-  rawData$date
stepsTotal [,1]<-  rawData[,2]
stepsTotal[,1] <-  rawData[,2]
rm stepsTotal
stepsTotal <- NULL
stepsTotal[,1] <-  rawData[,2]
t <- rawData[,2]
t [,2]<- tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
t [,2]<- tapply(rawData$steps, rawData$date, sum)
t <- cbind(rawData$date, tapply(rawData$steps, rawData$date, sum, na.rm=TRUE))
View(t)
rawData$date
t <- tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
t <- cbind(factor(rawData$date), tapply(rawData$steps, rawData$date, sum, na.rm=TRUE))
t <- tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
t
?hist
stepsTotal <-  tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
hist(stepsTotal)
str(stepsTotal)
names(stepsTotal)
?hist
plot(stepsTotal)
t <- cbind(names(stepsTotal), stepsTotal)
View(t)
View(t)
plot(t)
t <- cbind(names(stepsTotal), as.integer(stepsTotal)
)
t <- cbind(names(stepsTotal), as.integer(stepsTotal))
names(t)
t
hist(t)
t <- cbind(as.date(names(stepsTotal)), as.integer(stepsTotal))
t <- cbind(as.Date(names(stepsTotal)), as.integer(stepsTotal))
t
hist(t)
plot(t)
hist(t)
?hist
hist(stepsTotal)
barplot(t)
View(t)
barplot(stepsTotal)
hist(stepsTotal)
str(hist)
str(stepsTotal)
summary(stepsTotal)
stepsTotal
barplot(stepsTotal, xlab="days", ylbas="Steps_Number", title="Total Number of Steps per day")
?barplot
?xLabs*
)
?xLabs
?xLab
xlab
?xlab
barplot(stepsTotal, xlab="days", ylab="Steps_Number", title="Total Number of Steps per day")
barplot(stepsTotal, xlab="days", ylab="Steps_Number", main="Total Number of Steps per day")
stepsTotal
mean(stepsTotal)
meadian(stepsTotal)
median(stepsTotal)
?round
intervalSteps <- tapply(rawData$steps, interval, mean)
intervalSteps <- tapply(rawData$steps, rawData$interval, mean)
intervalSteps
library(dplyr)
d <- rawData
setpsTotal
totalSteps
stepsTotal
d <- mutate(d, dailySteps = stepsTotal(d$date))
d <- mutate(d, dailySteps = stepsTotal[d$date])
d
head(d)
tail(d)
stepsTotal[2012-10-09]
stepsTotal[as.date("2012-10-09")]
stepsTotal["2012-10-09"]
stepsTotal["2012-10-05"]
d <- mutate(d, intervalPct = steps/dailySteps )
View(d)
rawData <- mutate(rawData, dailySteps = as.integer(stepsTotal(d$date))
)
rawData <- mutate(rawData, dailySteps = as.interger(stepsTotal[d$date]))
rawData <- mutate(rawData, dailySteps = as.integer(stepsTotal[d$date]))
## Some variable settings
dir <- getwd()
rawDir <- "rawdata"
filename <- "activity.csv"
## Check directory and file exist
if (!any(dir(dir)==rawDir)) return(message(paste(
"Unable to find 'rawdata' directory. Please chek your working directory.\nCurrent directory ->", dir )))
setwd(file.path(dir,"rawdata"))
if (!any(list.files()==filename)) return(essage(paste(sep="",
"Unable to find '",filename,"' in '", rawDir,"'\nPlease check filename")))
setwd(dir)
## Load Data
message("Loading data...")
setwd(file.path(dir,"rawdata"))
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = factor(as.Date(date, "%Y-%m-%d")))  # transform date to Date format
```
stepsTotal <-  tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
dataset <- mutate(rawData, dailySteps = as.integer(stepsTotal[d$date]))
dataset <- mutate(dataset, intervalPct = steps/dailySteps, na.rm=TRUE)
dataset <- mutate(rawData, dailySteps = as.integer(stepsTotal[d$date]))
dataset <- mutate(rawData, dailySteps = as.integer(stepsTotal[rawData$date]))
dataset <- mutate(dataset, intervalPct = steps/dailySteps, na.rm=TRUE)
dataset <- mutate(rawData, dailySteps = as.integer(stepsTotal[rawData$date]))
dataset <- mutate(dataset, intervalPct = steps/dailySteps)
View(dataset)
intervalPct <- tapply(dataset$intervalPct, mean, interval, na.rm=TRUE)
intervalPct <- tapply(dataset$intervalPct, mean, dataset$interval, na.rm=TRUE)
intervalPct <- tapply(dataset$intervalPct, dataset$interval,mean, na.rm=TRUE)
plot(intervalPct)
plot(intervalPct, type="l")
dataset <- mutate(rawData, dailySteps = as.integer(stepsTotal[rawData$date]))
dataset <- mutate(dataset, intervalPct = round(steps/dailySteps *100,-1)
)
plot(intervalPct, type="l")
test <- rawdata[rawdata$date="2012-10-07",]
test <- rawdata[rawdata$date=="2012-10-07",]
test <- rawData[rawdata$date=="2012-10-07",]
test <- rawData[rawData$date=="2012-10-07",]
View(test)
View(test)
test
test <- mutate(test, dailySteps = as.integer(stepsTotal[rawData$date]))
test <- dataset[dataset$date=="2012-10-07",]
View(rawData)
View(test)
View(test)
sum(test[,1])
mutate(test, intervalPct = round(steps/dailySteps *100,0)
)
mutate(test, intervalPct = steps/dailySteps)
dataset <- mutate(rawData, dailySteps = as.integer(stepsTotal[rawData$date])))
dataset <- mutate(dataset, intervalPct = steps/dailySteps*100)
dataset <- mutate(rawData, dailySteps = as.integer(stepsTotal[rawData$date]))
dataset <- mutate(dataset, intervalPct = steps/dailySteps*100)
intervalPct <- tapply(dataset$intervalPct, dataset$interval,mean, na.rm=TRUE)
plot(intervalPct, type="l", xlab="interval number", ylab % )
plot(intervalPct)
plot(intervalPct, type="l", xlab="interval number", ylab="% of total daily steps", main = "Average percentage of average number of steps taken per intervals")
summary(intervalPct)
summary(intervalPct[intervalPct>1.78]
)
intervalPct[intervalPct>1.78]
dataset[dataset$intervalPct>1.78,]
intervalPct
intervalPct[intervalPCT>1.74]
intervalPct[intervalPct>1.74]
intervalPct[intervalPct==max(intervalPct)]
names(intervalPct[intervalPct==max(intervalPct)])
maxi <- names(intervalPct[intervalPct==max(intervalPct)])
print(paste(sep="", "The 5-minute interval where steps are on average most taken is interval number ", maxi," (meaning the ", maxi/5, "th interval"))
maxi/5
maxi*5
maxi
maxi <- names(intervalPct[intervalPct==max(intervalPct)])
print(paste(sep="", "The 5-minute interval where steps are on average most taken is interval number ", maxi," (meaning the ", as.integer(maxi)/5, "th interval"))
288*5
3600/5
intervalPct <- tapply(dataset$intervalPct, dataset$interval,mean)
plot(intervalPct, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
intervalPct <- tapply(dataset$intervalPct, dataset$interval,mean, na.rm=TRUE)
plot(intervalPct, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
?plot
plot(names(IntervalPct),intervalPct, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
dataset <- mutate(rawData, interval = factor(interval), dailySteps = as.integer(stepsTotal[rawData$date]), intervalPct = steps/dailySteps*100 )
names(intervalPct)
288*5
intervalPct <- tapply(dataset$intervalPct, dataset$interval,mean, na.rm=TRUE)
plot(intervalPct, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps
taken per intervals")
str rawData
str(rawData)
factor(rawData$interval)
t <- mutate(intervalPct, interval=names(intervalPct))
t <- mutate(intervalPct, interval=as.integer(names(intervalPct))
)
t <- intervalPct
t[,2]<- names(intervalPct)
t[,2]<- as.integer(names(intervalPct))
rm(t)
t[,1] <- as.integer(intervalPct)
t <- as.integer(names(intervalPct))
cbind(t,intervalPct)
t <- cbind(t, as.numerci(intervalPct)
)
t <- cbind(t, as.numeric(intervalPct))
plot(t)
rm(intervalPct))
rm(intervalPct)
temp <- tapply(dataset$intervalPct, dataset$interval,mean, na.rm=TRUE)
intervalPct <- cbind(as.integer(names(temp)), as.numeric(temp))
plot(intervalPct, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
intervalPct[1,][,intervalPct[,2]==max(intervalPct[,2])]
intervalPct[,intervalPct[,2]==max(intervalPct[,2])]
intervalPct[,2]==max(intervalPct[,2]
)
intervalPct[,intervalPct[,2]==max(intervalPct[,2])]
intervalPct[,2]==max(intervalPct[,2]
)
intervalPct[,2]==max(intervalPct[,2])
intervalPct[intervalPct[,2]==max(intervalPct[,2],]
intervalPct[intervalPct[,2]==max(intervalPct[,2]),]
intervalPct[intervalPct[,2]==max(intervalPct[,2]),1]
maxi <- intervalPct[intervalPct[,2]==max(intervalPct[,2]),1]
print(paste(sep="", "The 5-minute interval where steps are on average most taken is interval number ", maxi," (meaning the ", as.integer(maxi)/5, "th interval)"))
intervalPct[,1]
test <- mutate(dataset, weekTime=weekdays(date))
test <- mutate(dataset, weekTime=as.date(weekdays(date))
)
test <- mutate(dataset, weekTime=as.Date(weekdays(date)))
test <- mutate(dataset, weekTime=weekdays(date))
?weekdays
dataset[1]
dataset[,2]
weekdays(dataset[,2])
as.Date(dataset[,2])
weekdays(as.Date(dataset[,2])
)
test <- mutate(dataset, weekTime=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekTime=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekTime=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekDay=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekDay=factor(weekdays(as.Date(date))))
View(dataset)
str(dataset$weekday)
str(dataset$weekdays)
str(dataset$weekDays)
str(dataset$weekDay)
dataset <- mutate(dataset, weekDay=factor(wday(as.Date(date))))
dataset <- mutate(dataset, weekDay=factor(wday(as.POSIXlt(date))))
dataset <- mutate(dataset, weekDay=factor(weekdays(as.POSIXlt(date))))
?wday
install.packages("lubridates")
dataset <- mutate(dataset, weekdays=wday(as.Date(date)))
library(lubridate)
dataset <- mutate(dataset, weekdays=wday(as.Date(date)))
?wday
library(lubridates)
dataset <- mutate(dataset, weekdays=wday(as.Date(date)))
dataset <- mutate(dataset, weekdays=weekdays(as.Date(date)))
dataset[dataset$weekdays==5]
dataset[dataset$weekdays==5,]
dataset[dataset$weekdays=="lundi",]
Sys.time()
wday(Sys.time())
year(Sys.time())
weekdays(Sys.time())
as.integer( weekdays(Sys.time()))
weekdays.POSIXt(Sys.time())
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
Sys.getlocale(category="LC_ALL")
Sys.setlocale("LC_TIME", "English")
weekdays.POSIXt(Sys.time())
Sys.setlocale("LC_TIME", C)
Sys.setlocale("LC_TIME", "C")
weekdays.POSIXt(Sys.time())
Sys.setlocale("LC_TIME", "French")
weekdays.POSIXt(Sys.time())
Sys.setlocale("LC_TIME", "C")
weekdays.POSIXt(Sys.time())
Sys.getlocale("LC_Time")
?Sys
?Sys.getlocale
Sys.getlocale(category = "LC_Time")
Sys.getlocale(category = "LC_TIME")
Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "French")
langage <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
dataset <- mutate(dataset, weekdays=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday), c("Week"", "Weekend")))
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday), c("Week", "Weekend")))
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday"), c("Week", "Weekend")))
head(dataset)
?factor
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday"), labels = c("Week", "Weekend")))
head(dataset)
langage <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
dataset <- mutate(dataset, weekdays=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday"), labels = c("weekday", "weekend")))
Sys.setlocale("LC_TIME", langage)
Sys.setlocale("LC_TIME", "French")
langage <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
dataset <- mutate(dataset, weekdays=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday"), labels = c("weekday", "weekend")))
Sys.setlocale("LC_TIME", langage)
temp <- tapply(dataset$intervalPct[dataset$weekTime=="weekday",], dataset$interval,mean, na.rm=TRUE)
intervalPct_weekday <- cbind(as.integer(names(temp)), as.numeric(temp))
temp <- tapply(dataset[,5][dataset$weekTime=="weekday",], dataset$interval,mean, na.rm=TRUE)
dataweek <- dataset[weekTime=="weekday",]
dataweek <- dataset[dataset$weekTime=="weekday",]
dataweekend <- dataset[dataset$weekTime=="weekend",]
dataweek <- dataset[dataset$weekTime=="weekday",]
dataweekend <- dataset[dataset$weekTime=="weekend",]
temp <- tapply(dataweek$intervalPct, dataweek$interval,mean, na.rm=TRUE)
intervalPct_weekday <- cbind(as.integer(names(temp)), as.numeric(temp))
temp <- tapply(dataweekend$intervalPct, dataweekend$interval,mean, na.rm=TRUE)
intervalPct_weekend <- cbind(as.integer(names(temp)), as.numeric(temp))
plot(plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps )
)
)
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps )
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
par(new=TRUE)
plot(intervalPct_weekend, axes=false)
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
par(new=TRUE)
plot(intervalPct_weekend, type="l", axes=false, col.lab="red")
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
par(new=TRUE)
plot(intervalPct_weekend, type="l", axes=false, col="red")
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals", col="blue")
par(new=TRUE)
plot(intervalPct_weekend, type="l", axes=false, col="orange")
?plot
?legend
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals \n(blue = weekday - orange = weekend)", col="blue")
par(new=TRUE)
plot(intervalPct_weekend, type="l", axes=false, col="orange")
dataweek <- dataset[dataset$weekTime=="weekday",]
dataweekend <- dataset[dataset$weekTime=="weekend",]
temp <- tapply(dataweek$intervalPct, dataweek$interval,mean, na.rm=TRUE)
intervalPct_weekday <- cbind(as.integer(names(temp)), as.numeric(temp))
temp <- tapply(dataweekend$intervalPct, dataweekend$interval,mean, na.rm=TRUE)
intervalPct_weekend <- cbind(as.integer(names(temp)), as.numeric(temp))
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals \n(blue = weekday - orange = weekend)", col="blue")
par(new=TRUE)
plot(intervalPct_weekend, type="l", axes=false, col="orange")
dataweek <- dataset[dataset$weekTime=="weekday",]
dataweekend <- dataset[dataset$weekTime=="weekend",]
temp <- tapply(dataweek$intervalPct, dataweek$interval,mean, na.rm=TRUE)
intervalPct_weekday <- cbind(as.integer(names(temp)), as.numeric(temp))
temp <- tapply(dataweekend$intervalPct, dataweekend$interval,mean, na.rm=TRUE)
intervalPct_weekend <- cbind(as.integer(names(temp)), as.numeric(temp))
## Some variable settings
dir <- getwd()
rawDir <- "rawdata"
filename <- "activity.csv"
## Check directory and file exist
if (!any(dir(dir)==rawDir)) return(message(paste(
"Unable to find 'rawdata' directory. Please chek your working directory.\nCurrent directory ->", dir )))
setwd(file.path(dir,"rawdata"))
if (!any(list.files()==filename)) return(essage(paste(sep="",
"Unable to find '",filename,"' in '", rawDir,"'\nPlease check filename")))
setwd(dir)
## Load Data
message("Loading data...")
setwd(file.path(dir,"rawdata"))
rawData <- read.csv(filename, stringsAsFactors=FALSE)
rawData <- transform(rawData, date = factor(as.Date(date, "%Y-%m-%d")))  # transform date to Date format
stepsTotal <-  tapply(rawData$steps, rawData$date, sum, na.rm=TRUE)
barplot(stepsTotal, xlab="days", ylab="Steps", main="Total number of steps per day")
hist(stepsTotal, xlab="Number of steps", main ="Histogram of Total number of steps per day")
print(paste(c("MEAN of total number of steps taken per day =",round(mean(stepsTotal),0))))
print(paste(c("MEDIAN of total number of steps taken per day =",round(median(stepsTotal),0))))
library(dplyr)
dataset <- mutate(rawData, interval = factor(interval), dailySteps = as.integer(stepsTotal[rawData$date]), intervalPct = steps/dailySteps*100 )
##dataset <- mutate(dataset, intervalPct = steps/dailySteps*100)
## >intervalPct <- tapply(dataset$intervalPct, dataset$interval,mean, na.rm=TRUE)
temp <- tapply(dataset$intervalPct, dataset$interval,mean, na.rm=TRUE)
intervalPct <- cbind(as.integer(names(temp)), as.numeric(temp))
plot(intervalPct, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals")
maxi <- intervalPct[intervalPct[,2]==max(intervalPct[,2]),1]
print(paste(sep="", "The 5-minute interval where steps are on average most taken is interval number ", maxi,"."))
```{r}
langage <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
dataset <- mutate(dataset, weekdays=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday"), labels = c("weekday", "weekend")))
Sys.setlocale("LC_TIME", langage)
```
langage <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
dataset <- mutate(dataset, weekdays=weekdays(as.Date(date)))
dataset <- mutate(dataset, weekTime=factor((weekdays=="Sunday" | weekdays == "Saturday"), labels = c("weekday", "weekend")))
Sys.setlocale("LC_TIME", langage)
dataweek <- dataset[dataset$weekTime=="weekday",]
dataweekend <- dataset[dataset$weekTime=="weekend",]
temp <- tapply(dataweek$intervalPct, dataweek$interval,mean, na.rm=TRUE)
intervalPct_weekday <- cbind(as.integer(names(temp)), as.numeric(temp))
temp <- tapply(dataweekend$intervalPct, dataweekend$interval,mean, na.rm=TRUE)
intervalPct_weekend <- cbind(as.integer(names(temp)), as.numeric(temp))
plot(intervalPct_weekday, type="l", xlab="interval number", ylab="% of daily steps", main = "Average percentage of average number of steps taken per intervals \n(blue = weekday - orange = weekend)", col="blue")
par(new=TRUE)
plot(intervalPct_weekend, type="l", axes=false, col="orange")
